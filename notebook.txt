########################
Code design:

Our code is contained in `main.py` and our unit tests are stored in `unit_tests.py`. We also use the `experiments.sh` script for running our experiments.
Inside our `main.py` file, we have:
    - running_threads: a list of threads that are currently running
    - running_sockets: a list of sockets that are currently running
    - run_event: an event that is used to signal when to stop running
These three variables are used to keep track of the threads and sockets that are currently running, and to signal when to stop running. This in turn
helps with the graceful shutdown of the program.

In `get_sys_args`, we define what flags we want to use for our program. You can read more about each specific flag in the documentation for the function.
`get_sys_args` parses the flag values and returns it to the program for use.

In our `main` function, we first create a `shutdown_thread` that shutsdown the sockets, servers, and threads, after a specified `duration`. We call `gracefully_shutdown`
to gracefully shutdown these threads after the duration. Then after starting the `shutdown_thread` we start three threads in `start_threads`. Each thread has its own idenitier
 and is responsible for running a machine. Each thread calls `thread_process` to start running the thread. In `thread_process`, we
 0) Initialize an empty network queue for the specific machine
 1) Get a list of system arguments that are relevant to the machine
 2) Initialize a log file for the process with `init_log_file`
 3) Create a socket for the machine running on localhost with port = 3000 + identifier
 4) Start a thread that listens to connections with the function `listen_for_connections`. This function accepts incoming connections. Then for each connection, it starts a thread
 to read messages from the socket through the function `read_message_from_socket`. This function reads incoming messages and appends them to the network queue of the machine.
 5) We ensure that all servers are running before connecting to them for writes. 
 6) After setting up all the read and write sockets (total of 6 sockets), we get a random clock value (unless specified), initialize the logical clock to zero, and then make the
 machine start running the actions specified in the spec through `do_thread_actions`.
 7) Inside `do_thread_actions` we execute actions according to the assignment specifications.

########################

Unit testing:

Most of the functions in our code require opening sockets between multiple processes. We don't do any unit testing with these functions.

We do unit tests with the log writing functions that each of the processes use.
We test init_log_file() and write_to_log()

For init_log_file(), we test normal behavior of opening a log file, whether the function correctly overwrites a file rather than appending, and passing in different parameter types.

For write_to_log(), we test normal behavior of adding one line to an empty file, appending lines to a written file, initializing the file if it doesn't exist, and passing in different parameter types.

########################

Experiments:

We run the following 5 experiments on this three-machine model, with 5 runs each:

# Experiment 0: Run with default settings
# Experiment 1: All clock rates are exactly the same
# Experiment 2: 0, 1 are slow clock rate, 2 is very very fast
# Experiment 3: 0 is slow, 1 and 2 are fast
# Experiment 4: Default clock rates, but super likely to send messages (act_range down to 4)

These experiments cover a wide range of cases where the machines run at different rates and also
are more or less likely to send messages to each other.

Execute the experiments using 
$ ./experiments.sh

########################

Findings:

# Experiment 0: Run with default settings
asdf

# Experiment 1: All clock rates are exactly the same
asdf

# Experiment 2: 0, 1 are slow clock rate, 2 is very very fast
asdf

# Experiment 3: 0 is slow, 1 and 2 are fast
asdf

# Experiment 4: Default clock rates, but super likely to send messages (act_range down to 4)
asdf

Overall:
asdf